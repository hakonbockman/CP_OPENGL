#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;


void main(void){

	vec3 unitNormal = normalize(surfaceNormal); // normalize makes the vector into 1
	vec3 unitLightVector = normalize(toLightVector);
	
	// Dot product calculation
	float nDotl = dot(unitNormal, unitLightVector);
	float brightness = max(nDotl, 0.2); // So brightness cant be a negative value
	vec3 diffuse = brightness * lightColor;
	
	vec3 unitVectorToCamera = normalize(toCameraVector); // normalize makes the vector into 1
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal); // Makes so the light reflects
	
	// Dot product calculation, so it calculates how much the reflecting light is going to the camera
	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
	specularFactor = max(specularFactor, 0.0); // So brightness cant be a negative value
	float dampedFactor = pow(specularFactor, shineDamper);
	vec3 finalSpecular = dampedFactor * reflectivity * lightColor;

	// Takes in the texture we want to sample and the coordinates
	// returns the color of the pixel of the texture on that coordinate
	out_Color = vec4(diffuse, 1.0) * texture(textureSampler, pass_textureCoords) + vec4(finalSpecular, 1.0);

}